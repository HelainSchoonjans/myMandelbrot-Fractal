// Generated by CoffeeScript 1.9.1
(function() {
  "use strict";
  var Fractal;

  Fractal = (function() {
    Fractal.prototype.numberOfRows = 400;

    Fractal.prototype.numberOfColumns = 600;

    Fractal.prototype.canvas = null;

    Fractal.prototype.drawingContext = null;

    Fractal.prototype.epsilon = 0.0001;

    Fractal.prototype.maxIterations = 25;

    Fractal.prototype.cellSize = 1;

    Fractal.prototype.resolution = 150;

    Fractal.prototype.center_r = 0;

    Fractal.prototype.center_i = 0;

    function Fractal() {
      this.createCanvas();
      this.resizeCanvas();
      this.createDrawingContext();
      this.drawMandelbrot();
    }

    Fractal.prototype.createCanvas = function() {
      this.canvas = document.createElement('canvas');
      return document.body.appendChild(this.canvas);
    };

    Fractal.prototype.resizeCanvas = function() {
      this.canvas.height = this.cellSize * this.numberOfRows;
      return this.canvas.width = this.cellSize * this.numberOfColumns;
    };

    Fractal.prototype.createDrawingContext = function() {
      return this.drawingContext = this.canvas.getContext('2d');
    };

    Fractal.prototype.drawMandelbrot = function() {
      var column, j, k, ref, ref1, row;
      console.log("Begin generation with", this.maxIterations, "iteration(s)");
      console.log("Centered at", this.center_r, this.center_i);
      for (row = j = 0, ref = this.numberOfRows; 0 <= ref ? j < ref : j > ref; row = 0 <= ref ? ++j : --j) {
        for (column = k = 0, ref1 = this.numberOfColumns; 0 <= ref1 ? k < ref1 : k > ref1; column = 0 <= ref1 ? ++k : --k) {
          this.drawCurrentPixel(row, column);
        }
      }
      return console.log("Finished");
    };

    Fractal.prototype.drawCurrentPixel = function(row, column) {
      var b, c, i, iteration, r, x, y, z;
      iteration = 0;
      r = (column - (this.numberOfColumns / 2)) / this.resolution + this.center_r;
      i = (row - (this.numberOfRows / 2)) / this.resolution + this.center_i;
      c = new Complex(r, i);
      z = new Complex(0, 0);
      while (iteration < this.maxIterations && z.magnitude < 2) {
        z = z.times(z).plus(c);
        iteration = iteration + 1;
      }
      b = iteration * 360 / this.maxIterations;
      this.drawingContext.fillStyle = "hsl(" + b + ", 60%, 50%)";
      x = column * this.cellSize;
      y = this.canvas.height - row * this.cellSize;
      return this.drawingContext.fillRect(x, y, this.cellSize, this.cellSize);
    };

    Fractal.prototype.applyDeltaIterations = function(delta) {
      this.maxIterations += delta;
      return this.drawMandelbrot();
    };

    return Fractal;

  })();

  window.Fractal = Fractal;

}).call(this);
