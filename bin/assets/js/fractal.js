// Generated by CoffeeScript 1.9.1
(function() {
  "use strict";
  var Fractal;

  Fractal = (function() {
    Fractal.prototype.numberOfRows = 400;

    Fractal.prototype.numberOfColumns = 600;

    Fractal.prototype.canvas = null;

    Fractal.prototype.drawingContext = null;

    Fractal.prototype.epsilon = 0.0001;

    Fractal.prototype.maxIterations = 25;

    Fractal.prototype.cellSize = 1;

    Fractal.prototype.resolution = 150;

    Fractal.prototype.type = 'mandelbrot';

    Fractal.prototype.center_r = 0;

    Fractal.prototype.center_i = 0;

    function Fractal() {
      this.createCanvas();
      this.resizeCanvas();
      this.createDrawingContext();
      this.drawFractal();
    }

    Fractal.prototype.drawFractal = function() {
      console.log("Begin generation with", this.maxIterations, "iteration(s)");
      console.log("Centered at", this.center_r, this.center_i);
      switch (this.type) {
        case 'circle':
          this.drawCircleFractal();
          break;
        case 'mandelbrot':
          this.drawMandelbrot();
          break;
        case 'cantor':
          this.drawCantor();
      }
      return console.log("Finished");
    };

    Fractal.prototype.createCanvas = function() {
      this.canvas = document.createElement('canvas');
      return document.body.appendChild(this.canvas);
    };

    Fractal.prototype.resizeCanvas = function() {
      this.canvas.height = this.cellSize * this.numberOfRows;
      return this.canvas.width = this.cellSize * this.numberOfColumns;
    };

    Fractal.prototype.createDrawingContext = function() {
      return this.drawingContext = this.canvas.getContext('2d');
    };

    Fractal.prototype.drawCircle = function(x, y, radius, iteration) {
      this.drawingContext.strokeStyle = "hsl(" + radius + ", 60%, 50%)";
      this.drawingContext.beginPath();
      this.drawingContext.arc(x, y, radius, 0, 2 * Math.PI);
      this.drawingContext.stroke();
      if (iteration < this.maxIterations && radius > 1) {
        this.drawCircle();
        this.drawCircle(x + radius / 2, y, radius / 2, iteration + 1);
        return this.drawCircle(x - radius / 2, y, radius / 2, iteration + 1);
      }
    };

    Fractal.prototype.drawCircleFractal = function() {
      var column, j, k, ref, ref1, row;
      for (row = j = 0, ref = this.numberOfRows; 0 <= ref ? j < ref : j > ref; row = 0 <= ref ? ++j : --j) {
        for (column = k = 0, ref1 = this.numberOfColumns; 0 <= ref1 ? k < ref1 : k > ref1; column = 0 <= ref1 ? ++k : --k) {
          this.drawCurrentPixel(row, column);
        }
      }
      this.drawingContext.clearRect(0, 0, this.canvas.width, this.canvas.height);
      return this.drawCircle(this.numberOfColumns / 2 + this.center_r, this.numberOfRows / 2 + this.center_i, this.resolution, 0);
    };

    Fractal.prototype.cantor = function(x, y, len) {
      if (x == null) {
        x = 20 + this.center_r;
      }
      if (y == null) {
        y = this.canvas.height / 3 + this.center_i;
      }
      if (len == null) {
        len = this.canvas.width * this.resolution / 150 - 40;
      }
      if (len >= 1) {
        this.drawingContext.fillStyle = "hsl(0, 60%, 50%)";
        this.drawingContext.fillRect(x, y, len, 10 * this.resolution / 150);
        y += 20. * this.resolution / 150;
        this.cantor(x, y, len / 3);
        return this.cantor(x + len * 2 / 3, y, len / 3);
      }
    };

    Fractal.prototype.drawCantor = function() {
      this.drawingContext.clearRect(0, 0, this.canvas.width, this.canvas.height);
      return this.cantor();
    };

    Fractal.prototype.drawMandelbrot = function() {
      var column, j, ref, results, row;
      results = [];
      for (row = j = 0, ref = this.numberOfRows; 0 <= ref ? j < ref : j > ref; row = 0 <= ref ? ++j : --j) {
        results.push((function() {
          var k, ref1, results1;
          results1 = [];
          for (column = k = 0, ref1 = this.numberOfColumns; 0 <= ref1 ? k < ref1 : k > ref1; column = 0 <= ref1 ? ++k : --k) {
            results1.push(this.drawCurrentPixel(row, column));
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    Fractal.prototype.drawCurrentPixel = function(row, column) {
      var b, c, i, iteration, r, x, y, z;
      iteration = 0;
      r = (column - (this.numberOfColumns / 2)) / this.resolution + this.center_r;
      i = (row - (this.numberOfRows / 2)) / this.resolution + this.center_i;
      c = new Complex(r, i);
      z = new Complex(0, 0);
      while (iteration < this.maxIterations && z.magnitude < 2) {
        z = z.times(z).plus(c);
        iteration = iteration + 1;
      }
      b = iteration * 360 / this.maxIterations;
      this.drawingContext.fillStyle = "hsl(" + b + ", 60%, 50%)";
      x = column * this.cellSize;
      y = this.canvas.height - row * this.cellSize;
      return this.drawingContext.fillRect(x, y, this.cellSize, this.cellSize);
    };

    Fractal.prototype.changeType = function() {
      this.type = document.getElementById("type").value;
      console.log("type", this.type);
      return this.drawFractal();
    };

    return Fractal;

  })();

  window.Fractal = Fractal;

}).call(this);
